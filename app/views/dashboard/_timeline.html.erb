<%
  # Build all timeline events (wishlist items, income, expenses)
  all_events = []

  # Add wishlist items
  allocation_result[:timeline].each do |timeline_item|
    allocation = allocation_result[:allocations].find { |a| a[:item_name] == timeline_item[:item].name }
    if allocation && allocation[:completion_date]
      all_events << {
        type: 'wishlist',
        item: timeline_item[:item],
        date: allocation[:completion_date],
        item_type: timeline_item[:item].item_type,
        amount: timeline_item[:item].cost
      }
    end
  end

  # Add income events
  allocation_result[:incomes].each do |income|
    all_events << {
      type: 'income',
      date: income[:date],
      amount: income[:amount],
      description: income[:description]
    }
  end

  # Add expense events
  allocation_result[:expenses].each do |expense|
    all_events << {
      type: 'expense',
      date: expense[:date],
      amount: expense[:amount],
      description: expense[:description]
    }
  end

  # Sort all events by date
  all_events.sort_by! { |e| e[:date] }

  # Calculate cumulative balance over time
  cumulative_balance = 0
  all_events.each do |event|
    case event[:type]
    when 'income'
      cumulative_balance += event[:amount]
    when 'expense'
      cumulative_balance -= event[:amount]
    when 'wishlist'
      cumulative_balance -= event[:amount]
    end
    event[:cumulative_balance] = cumulative_balance
  end

  # Pagination: 90-day windows
  current_page = (params[:timeline_page] || 0).to_i
  days_per_page = 90

  if all_events.any?
    # Start from today or first event, whichever is earlier
    absolute_min_date = [all_events.first[:date], Date.current].min
    absolute_max_date = all_events.last[:date]

    # Calculate page boundaries
    min_date = absolute_min_date + (current_page * days_per_page).days
    max_date = [min_date + days_per_page.days, absolute_max_date + 7.days].min

    # Filter events to current page
    visible_events = all_events.select { |e| e[:date] >= min_date && e[:date] <= max_date }

    # Check if there are more pages
    has_next_page = absolute_max_date > max_date
    has_prev_page = current_page > 0
  else
    min_date = Date.current
    max_date = Date.current + days_per_page.days
    visible_events = []
    has_next_page = false
    has_prev_page = false
  end

  date_range = (max_date - min_date).to_i

  # Calculate positions and alternate above/below
  visible_events.each_with_index do |event, index|
    event[:position] = ((event[:date] - min_date).to_i.to_f / date_range * 100).round(2)
    event[:is_above] = index.even?
  end

  # Apply filters
  active_filters = {
    income: params[:show_income] != 'false',
    expense: params[:show_expense] != 'false',
    wishlist: params[:show_wishlist] != 'false'
  }

  # Filter visible events based on active filters
  filtered_events = visible_events.select do |event|
    case event[:type]
    when 'income'
      active_filters[:income]
    when 'expense'
      active_filters[:expense]
    when 'wishlist'
      active_filters[:wishlist]
    end
  end

  # Recalculate above/below positioning for filtered events
  filtered_events.each_with_index do |event, index|
    event[:is_above] = index.even?
  end

  # Calculate horizontal offsets for items on the same date and level
  # Group by date and level (above/below)
  grouped_events = filtered_events.group_by { |e| [e[:date], e[:is_above]] }

  filtered_events.each do |event|
    key = [event[:date], event[:is_above]]
    events_at_same_position = grouped_events[key]

    if events_at_same_position.length > 1
      # Find this event's index within its group
      index_in_group = events_at_same_position.index(event)

      # Calculate offset: just enough to show the edge (~30px per card)
      # Cards are 120px wide, we want them to overlap with just edge visible
      offset_per_item = 30  # pixels - just enough to see the edge

      # Find the middle index - this card stays at 0
      middle_index = (events_at_same_position.length - 1) / 2.0

      # Calculate offset relative to middle (middle card = 0 offset)
      event[:horizontal_offset] = (index_in_group - middle_index) * offset_per_item
    else
      event[:horizontal_offset] = 0
    end
  end
%>

<% if all_events.any? %>
  <!-- Filter Controls -->
  <div class="flex items-center gap-4 mb-4 pb-4 border-b border-gray-200">
    <span class="text-sm font-medium text-gray-700">Show:</span>

    <%= link_to dashboard_path(timeline_page: current_page, show_income: !active_filters[:income], show_expense: params[:show_expense], show_wishlist: params[:show_wishlist]),
                class: "flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors #{active_filters[:income] ? 'bg-green-100 text-green-800 border-2 border-green-500' : 'bg-gray-100 text-gray-500 border-2 border-transparent hover:bg-gray-200'}" do %>
      <div class="w-3 h-3 rounded-full bg-green-500"></div>
      <span>Income</span>
    <% end %>

    <%= link_to dashboard_path(timeline_page: current_page, show_income: params[:show_income], show_expense: !active_filters[:expense], show_wishlist: params[:show_wishlist]),
                class: "flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors #{active_filters[:expense] ? 'bg-red-100 text-red-800 border-2 border-red-500' : 'bg-gray-100 text-gray-500 border-2 border-transparent hover:bg-gray-200'}" do %>
      <div class="w-3 h-3 rounded-full bg-red-500"></div>
      <span>Expenses</span>
    <% end %>

    <%= link_to dashboard_path(timeline_page: current_page, show_income: params[:show_income], show_expense: params[:show_expense], show_wishlist: !active_filters[:wishlist]),
                class: "flex items-center gap-2 px-3 py-1.5 rounded-md text-sm font-medium transition-colors #{active_filters[:wishlist] ? 'bg-blue-100 text-blue-800 border-2 border-blue-500' : 'bg-gray-100 text-gray-500 border-2 border-transparent hover:bg-gray-200'}" do %>
      <div class="w-3 h-3 rounded-full bg-blue-500"></div>
      <span>Wishlist</span>
    <% end %>
  </div>

  <!-- Timeline Navigation -->
  <div class="flex justify-between items-center mb-4">
    <% if has_prev_page %>
      <%= link_to dashboard_path(timeline_page: current_page - 1, show_income: params[:show_income], show_expense: params[:show_expense], show_wishlist: params[:show_wishlist]), class: "flex items-center gap-2 text-indigo-600 hover:text-indigo-800 font-medium" do %>
        <span>‚Üê</span>
        <span>Previous 90 Days</span>
      <% end %>
    <% else %>
      <div></div>
    <% end %>

    <div class="text-sm text-gray-600">
      <%= min_date.strftime('%b %d, %Y') %> - <%= max_date.strftime('%b %d, %Y') %>
    </div>

    <% if has_next_page %>
      <%= link_to dashboard_path(timeline_page: current_page + 1, show_income: params[:show_income], show_expense: params[:show_expense], show_wishlist: params[:show_wishlist]), class: "flex items-center gap-2 text-indigo-600 hover:text-indigo-800 font-medium" do %>
        <span>Next 90 Days</span>
        <span>‚Üí</span>
      <% end %>
    <% else %>
      <div></div>
    <% end %>
  </div>

  <!-- Timeline visualization -->
  <div class="relative py-8 px-8">
    <!-- Top spacing for labels above timeline -->
    <div class="h-24"></div>

    <!-- Timeline bar with markers -->
    <div class="relative" style="min-height: 200px;">
      <!-- The horizontal line (positioned where dots are) -->
      <div class="absolute left-0 right-0 h-1 bg-gray-300" style="top: 25px;"></div>

      <!-- Timeline markers -->
      <% filtered_events.each_with_index do |event, index| %>
        <%
          position = event[:position]
          horizontal_offset = event[:horizontal_offset]
          is_above = event[:is_above]

          # Set colors and icons based on type
          case event[:type]
          when 'income'
            color = 'green'
            bg_color = 'bg-green-500'
            text_color = 'text-green-700'
            icon = '‚Üë' # Up arrow for income
          when 'expense'
            color = 'red'
            bg_color = 'bg-red-500'
            text_color = 'text-red-700'
            icon = '‚Üì' # Down arrow for expense
          when 'wishlist'
            color = 'blue'
            bg_color = 'bg-blue-500'
            text_color = 'text-blue-700'
            # Icons for wishlist item types
            icon = case event[:item_type]
              when 'target_date' then 'üìÖ'
              when 'sequential' then '#'
              when 'percentage' then '%'
              else 'üéÅ'
            end
          end

          item_id = "timeline-marker-#{event[:type]}-#{event[:date].to_s.parameterize}-#{index}"
        %>

        <!-- Marker container with transition -->
        <div class="timeline-marker absolute hover:z-50 transition-all duration-200"
             id="<%= item_id %>"
             data-event-type="<%= event[:type] %>"
             style="left: <%= position %>%; top: 24px; transform: translateX(-50%); transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1), z-index 0s;">

          <!-- Dot on the timeline -->
          <div class="absolute" style="top: 0; left: 50%; transform: translateX(-50%);">
            <div class="w-3 h-3 rounded-full border-2 border-white shadow <%= bg_color %> hover:scale-125" style="transition: background-color 0.3s, transform 0.3s;"></div>
          </div>

          <% if is_above %>
            <!-- Vertical line going up -->
            <div class="absolute w-0.5 <%= bg_color %> opacity-30" style="left: 50%; transform: translateX(-50%); bottom: 12px; height: 50px;"></div>

            <!-- Label above timeline -->
            <%
              calc_offset = if horizontal_offset >= 0
                "+ #{horizontal_offset.round(1)}px"
              else
                "- #{horizontal_offset.abs.round(1)}px"
              end
            %>
            <div class="absolute hover:scale-105 transition-transform duration-200" style="bottom: 62px; left: calc(50% <%= calc_offset %>); transform: translateX(-50%); width: 120px;" data-offset="<%= horizontal_offset %>">
              <div class="bg-white rounded-lg shadow-sm hover:shadow-lg border border-gray-200 hover:border-gray-300 p-2 transition-all duration-200">
                <div class="text-[10px] font-semibold <%= text_color %> text-center truncate hover:whitespace-normal hover:text-clip">
                  <%= icon %> <%= event[:type] == 'wishlist' ? event[:item].name : event[:description] %>
                </div>
                <div class="text-[9px] text-gray-600 text-center mt-0.5">
                  <%= event[:date].strftime('%m/%d') %>
                </div>
                <div class="text-[9px] text-gray-900 text-center font-medium">
                  <%= number_to_currency(event[:amount].abs) %>
                </div>
                <div class="text-[8px] font-bold text-gray-500 text-center mt-0.5 border-t border-gray-100 pt-0.5">
                  Bal: <%= number_to_currency(event[:cumulative_balance]) %>
                </div>
              </div>
            </div>
          <% else %>
            <!-- Vertical line going down -->
            <div class="absolute w-0.5 <%= bg_color %> opacity-30" style="left: 50%; transform: translateX(-50%); top: 12px; height: 50px;"></div>

            <!-- Label below timeline -->
            <%
              calc_offset = if horizontal_offset >= 0
                "+ #{horizontal_offset.round(1)}px"
              else
                "- #{horizontal_offset.abs.round(1)}px"
              end
            %>
            <div class="absolute hover:scale-105 transition-transform duration-200" style="top: 62px; left: calc(50% <%= calc_offset %>); transform: translateX(-50%); width: 120px;" data-offset="<%= horizontal_offset %>">
              <div class="bg-white rounded-lg shadow-sm hover:shadow-lg border border-gray-200 hover:border-gray-300 p-2 transition-all duration-200">
                <div class="text-[10px] font-semibold <%= text_color %> text-center truncate hover:whitespace-normal hover:text-clip">
                  <%= icon %> <%= event[:type] == 'wishlist' ? event[:item].name : event[:description] %>
                </div>
                <div class="text-[9px] text-gray-600 text-center mt-0.5">
                  <%= event[:date].strftime('%m/%d') %>
                </div>
                <div class="text-[9px] text-gray-900 text-center font-medium">
                  <%= number_to_currency(event[:amount].abs) %>
                </div>
                <div class="text-[8px] font-bold text-gray-500 text-center mt-0.5 border-t border-gray-100 pt-0.5">
                  Bal: <%= number_to_currency(event[:cumulative_balance]) %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>

    <!-- Bottom spacing -->
    <div class="h-32"></div>

    <!-- Date range labels -->
    <div class="flex justify-between text-sm text-gray-600 font-medium" style="transition: opacity 0.4s;">
      <span style="transition: opacity 0.3s;"><%= min_date.strftime('%B %Y') %></span>
      <span style="transition: opacity 0.3s;"><%= max_date.strftime('%B %Y') %></span>
    </div>
  </div>

  <!-- Legend -->
  <div class="flex items-center gap-6 mb-6 text-sm flex-wrap">
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 rounded-full bg-green-500"></div>
      <span class="text-gray-600">‚Üë Income</span>
    </div>
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 rounded-full bg-red-500"></div>
      <span class="text-gray-600">‚Üì Expense</span>
    </div>
    <div class="flex items-center gap-2">
      <div class="w-4 h-4 rounded-full bg-blue-500"></div>
      <span class="text-gray-600">üéÅ Wishlist Items</span>
    </div>
    <div class="text-gray-500 text-xs ml-4">
      üìÖ Target Date | # Sequential | % Percentage
    </div>
  </div>
<% else %>
  <p class="text-sm text-gray-500">No events to display on timeline</p>
<% end %>
